// VKey.cpp: implementation of the VKey class.
//
//////////////////////////////////////////////////////////////////////

#include "pch.h"
#include "VKey.h"
#include <windows.h>
#include <winuser.h>
#include "PowerDebug.h"

using namespace std;
using namespace vir;

#define LCTRL_MASK   ( 1 << 16 )
#define RCTRL_MASK   ( 1 << 17 )
#define ALT_MASK     ( 1 << 18 )
#define LSHIFT_MASK  ( 1 << 19 )
#define RSHIFT_MASK  ( 1 << 20 )
#define LMENU_MASK   ( 1 << 21 )
#define RMENU_MASK   ( 1 << 22 )
#define SCROLL_MASK  ( 1 << 23 )
#define NUM_MASK     ( 1 << 24 )

#define RAW_KEY_MASK ( 0xFF )

// VKey 'key' format:
// 
// bit 0-15: VK_ value.
// bit 16  : 1 if left CTRL is down.
// bit 17  : 1 if right CTRL is down.
// bit 18  : 1 if ALT is down.
// bit 19  : 1 if left SHIFT is down.
// bit 20  : 1 if right SHIFT is down.
// bit 21  : 1 if left MENU is down.
// bit 22  : 1 if right MENU is down.
// bit 23  : 1 if scroll lock was ON.
// bit 24  : 1 if num lock was ON.



// Constructor ///////////////////////////////////////////////////////////////////////////
 VKey::VKey()
//////////////////////////////////////////////////////////////////////////////////////////
 : 
    key( 0 )
{}
// Copy contructor ///////////////////////////////////////////////////////////////////////
VKey::VKey
//////////////////////////////////////////////////////////////////////////////////////////
(
 const VKey &vKey
)
//////////////////////////////////////////////////////////////////////////////////////////
 : 
    key( vKey.key )
{}

// Constructor ///////////////////////////////////////////////////////////////////////////
VKey::VKey
(
 unsigned short virKey,
 bool ctrl,
 bool shift,
 bool alt
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    SetKey( virKey, ctrl, shift, alt );
}
    
//////////////////////////////////////////////////////////////////////////////////////////
long VKey::AsLong( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  Returns the vKey as a long.
// 
//////////////////////////////////////////////////////////////////////////////////////////
{
    return key;
}

//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetLong
//////////////////////////////////////////////////////////////////////////////////////////
// Sets the value from a 'long' value returned by AsLong().
// (for storage retreival).
// 
(
 long val // Value.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    key = val;
}

//////////////////////////////////////////////////////////////////////////////////////////
unsigned short VKey::GetKey( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  Returns the raw key (without keyboard states).
// 
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( key & RAW_KEY_MASK );
}
    
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetKey
//////////////////////////////////////////////////////////////////////////////////////////
// Sets the key, also look for CTRL, ALT and SHIFT keyboard states.
// 
(
 unsigned short virKey, // The VK_ to set. 
 bool ctrl,             // If the key is a control key.
 bool shift,            // If the key is a shift key.
 bool alt               // If the key is an alternate key.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    // Cannot set keyboard states.
    switch( virKey ){
    case VK_CONTROL:
    case VK_SHIFT:
    case VK_LCONTROL:
    case VK_RCONTROL:
    case VK_LSHIFT:
    case VK_RSHIFT:
        return;
    };

    key = virKey;

    if( ctrl ){
        SetLCTRL();
    }
    if( alt ){
        SetALT();
    }
    if( shift ){
        SetLSHIFT();
    }
}
    
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetRawKey
//////////////////////////////////////////////////////////////////////////////////////////
// Sets the key but doesn't look for other keyboard states.
// 
(
 unsigned short virKey // The VK_ to set.
)
//////////////////////////////////////////////////////////////////////////////////////////
{
    key = virKey;
}

//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::operator ==
//////////////////////////////////////////////////////////////////////////////////////////
//  Determines if two VKeys are the same.
// 
(
 const VKey &vKey
) const
//////////////////////////////////////////////////////////////////////////////////////////
{
    // Does not check numlock and scrolllock states for comparing.
    return ( key & ~( NUM_MASK | SCROLL_MASK ) ) == ( vKey.key & ~( NUM_MASK | SCROLL_MASK ) );
}

//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::LCTRL( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Left control down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & LCTRL_MASK ) ? true : false );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::RCTRL( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  Right control down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & RCTRL_MASK ) ? true : false );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::ALT( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  ALT down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & ALT_MASK ) ? true : false );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::LSHIFT( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Left shift down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & LSHIFT_MASK ) ? true : false );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::RSHIFT( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  Right shift down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & RSHIFT_MASK ) ? true : false );
}

//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::LMENU( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Right menu down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & LMENU_MASK ) ? true : false );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::RMENU( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Right menu down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( ( key & RMENU_MASK ) ? true : false );
}

//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::CTRL( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Control down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( LCTRL() || RCTRL() );
}
//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::SHIFT( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  SHIFT down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( LSHIFT() || RSHIFT() );
}

//////////////////////////////////////////////////////////////////////////////////////////
bool VKey::MENU( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
// Menu down.
//////////////////////////////////////////////////////////////////////////////////////////
{
    return( LMENU() || RMENU() );
}

//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetLCTRL( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= LCTRL_MASK;
    }else{ key &= ~LCTRL_MASK; }
}
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetRCTRL( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= RCTRL_MASK;
    }else{ key &= ~RCTRL_MASK; }
}
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetLSHIFT( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= LSHIFT_MASK;
    }else{ key &= ~LSHIFT_MASK; }
}
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetRSHIFT( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= RSHIFT_MASK;
    }else{ key &= ~RSHIFT_MASK; }
}
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetLMENU( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= LMENU_MASK;
    }else{ key &= ~LMENU_MASK; }
}
//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetRMENU( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= RMENU_MASK;
    }else{ key &= ~RMENU_MASK; }
}

//////////////////////////////////////////////////////////////////////////////////////////
void VKey::SetALT( bool state )
//////////////////////////////////////////////////////////////////////////////////////////
{
    if( state ){ key |= ALT_MASK;
    }else{ key &= ~ALT_MASK; }
}

//////////////////////////////////////////////////////////////////////////////////////////
string VKey::GetName( void ) const
//////////////////////////////////////////////////////////////////////////////////////////
//  Returns the name of the key.
//////////////////////////////////////////////////////////////////////////////////////////
{
    string keyName;

    if( CTRL() ){
        keyName += "CTRL-";
    }
    if( ALT() ){
        keyName += "ALT-";
    }
    if( SHIFT() ){
        keyName += "SHIFT-";
    }
    if( MENU() ){
        keyName += "MENU-";
    }
    LOG << "\r\nvkey1";
    unsigned short vKey = GetKey();
    switch( vKey ){ 
    case VK_BACK:   keyName += "Backspace"; break;
    case VK_TAB:    keyName += "Tab"; break;
    case VK_CLEAR:  keyName += "Clear"; break;
    case VK_RETURN: keyName += "Return"; break;
    case VK_PAUSE:  keyName += "Pause"; break;
    case VK_ESCAPE: keyName += "ESC"; break;
    case VK_SPACE:  keyName += "Space"; break;
    case VK_PRIOR:  keyName += "PgUp"; break;
    case VK_NEXT:  keyName += "PgDown"; break;
    case VK_END:  keyName += "End"; break;
    case VK_HOME:  keyName += "Home"; break;
    case VK_LEFT:  keyName += "Left"; break;
    case VK_UP:  keyName += "Up"; break;
    case VK_RIGHT:  keyName += "Right"; break;
    case VK_DOWN:  keyName += "Down"; break;
    case VK_SELECT:  keyName += "Select"; break;
    case VK_PRINT:  keyName += "Print"; break;
    case VK_EXECUTE:  keyName += "Exec"; break;
    case VK_SNAPSHOT:  keyName += "Print screen"; break;
    case VK_INSERT:  keyName += "Insert"; break;
    case VK_DELETE:  keyName += "Delete"; break;
    case VK_HELP:  keyName += "Help"; break;
    case VK_NUMPAD0:  keyName += "NUM0"; break;
    case VK_NUMPAD1:  keyName += "NUM1"; break;
    case VK_NUMPAD2:  keyName += "NUM2"; break;
    case VK_NUMPAD3:  keyName += "NUM3"; break;
    case VK_NUMPAD4:  keyName += "NUM4"; break;
    case VK_NUMPAD5:  keyName += "NUM5"; break;
    case VK_NUMPAD6:  keyName += "NUM6"; break;
    case VK_NUMPAD7:  keyName += "NUM7"; break;
    case VK_NUMPAD8:  keyName += "NUM8"; break;
    case VK_NUMPAD9:  keyName += "NUM9"; break;
    case VK_MULTIPLY:   keyName += "*"; break;
    case VK_ADD:        keyName += "+"; break;
    case VK_SEPARATOR:  keyName += ","; break;
    case VK_SUBTRACT:   keyName += "-"; break;
    case VK_DECIMAL:    keyName += "."; break;
    case VK_DIVIDE:     keyName += "/"; break;
    case VK_F1:  keyName += "F1"; break;
    case VK_F2:  keyName += "F2"; break;
    case VK_F3:  keyName += "F3"; break;
    case VK_F4:  keyName += "F4"; break;
    case VK_F5:  keyName += "F5"; break;
    case VK_F6:  keyName += "F6"; break;
    case VK_F7:  keyName += "F7"; break;
    case VK_F8:  keyName += "F8"; break;
    case VK_F9:  keyName += "F9"; break;
    case VK_F10:  keyName += "F10"; break;
    case VK_F11:  keyName += "F11"; break;
    case VK_F12:  keyName += "F12"; break;
    case VK_F13:  keyName += "F13"; break;
    case VK_F14:  keyName += "F14"; break;
    case VK_F15:  keyName += "F15"; break;
    case VK_F16:  keyName += "F16"; break;
    case VK_F17:  keyName += "F17"; break;
    case VK_F18:  keyName += "F18"; break;
    case VK_F19:  keyName += "F19"; break;
    case VK_F20:  keyName += "F20"; break;
    case VK_F21:  keyName += "F21"; break;
    case VK_F22:  keyName += "F22"; break;
    case VK_F23:  keyName += "F23"; break;
    case VK_F24:  keyName += "F24"; break;
    default:
        LOG << "\r\nvkey2";
        char buf[ 256 ];
        sprintf( buf, "%c", static_cast< char >( vKey ) );
        keyName += buf;
        LOG << "\r\nvkey3";
        break;
    };

    LOG << "\r\nResulting name: " << (char *)keyName.c_str() << "..!";

    return keyName;
}
